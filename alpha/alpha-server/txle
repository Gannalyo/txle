#!/bin/bash

# Java_HOME
JAVA_HOME=$(which java)
# echo $JAVA_HOME

# ensure the 'bashrc' file can be loaded in using 'systemd' case.
source ~/.bashrc

# main class
MAIN_CLASS=org.apache.servicecomb.saga.alpha.server.AlphaApplication

# Getting current file path. It is compatible to execute even if this file is not its path.
BIN_DIR=$(cd `dirname $0`; pwd)

cd $BIN_DIR
cd ..

DEPLOY_DIR=`pwd`

SERVER_NAME=txle
PROJECT_VERSION=2.19.10.0
LIB_DIR=$DEPLOY_DIR/lib
CONF_DIR=$DEPLOY_DIR/conf
LOG_FILE="$DEPLOY_DIR/log/stdout.log"
GC_LOG_FILE="$DEPLOY_DIR/log/gc-stdout.log"
SERVER_PORT=""
ONLY_PORT=""
RPC_PORT=""
METRICS_PORT=""
P_HA=""
P_DEBUG=""

for p_name in $@; do
    val=`echo "$p_name" | sed -e 's;^--[^=]*=;;'`
    case $p_name in
        --config-dir=*) CONF_DIR=$val ;;
        --log=*) LOG_FILE=$val ;;
        --debug) P_DEBUG="true" ;;
        --port=*) SERVER_PORT="-Dserver.port=$val" ; ONLY_PORT="$val";;
        --rpc-port=*) RPC_PORT="-Dalpha.server.port=$val";;
        --metrics-port=*) METRICS_PORT="-Dtxle.prometheus.metrics.port=$val";;
        -ha) P_HA="true" ;;
    esac
done

TXLEPIDFILE=$CONF_DIR/txle_server$ONLY_PORT.pid

start() {
    if [ ! -f "$TXLEPIDFILE" ]; then
	touch "$TXLEPIDFILE"
    else
	PID=`cat "$TXLEPIDFILE"`
	SERVER_STATUS=`ps -ef|grep -w "$PID" |grep -v "grep" |wc -l`
	if [ $SERVER_STATUS -gt 0 ]; then
		echo "warning: $SERVER_NAME server has been started!"
		echo "PID: $PID"
		exit 1
	else
		# PIDFILE is existent, but it is not alive.
		rm "$TXLEPIDFILE"
	fi
    fi

    if [ ! -f $LOG_FILE ]; then
	mkdir -p $LOG_FILE
	rmdir $LOG_FILE
	touch $LOG_FILE
    fi

    # like: /dir/a.jar:/dir/b.jar...
    LIB_JARS=`ls $LIB_DIR |grep .jar |awk '{print "'$LIB_DIR'/"$0}' |tr "\n" ":"`
    for xml in $CONF_DIR/*.xml
	do	LIB_JARS=$LIB_JARS:$xml
    done
    for env in $CONF_DIR/*.properties
	do	LIB_JARS=$LIB_JARS:$env
    done

    if [ -n "$P_CONFIG" ]; then
	LIB_JARS=$LIB_JARS:$P_CONFIG
    else
	for yml in $CONF_DIR/*.yaml
		do     LIB_JARS=$LIB_JARS:$yml
	done
    fi

    JAVA_OPTS=" -Djava.awt.headless=true -Djava.net.preferIPv4Stack=true "
    JAVA_DEBUG_OPTS=""
    if [ "$P_DEBUG" = "true" ]; then
	JAVA_DEBUG_OPTS=" -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n "
    fi

    JAVA_JMX_OPTS=""

    JAVA_MEM_OPTS=" -server -Xmx2g -Xms2g -Xmn256m -XX:PermSize=128m -Xloggc:$GC_LOG_FILE -XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -Djava.rmi.server.hostname=10.186.61.3 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1099 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"

    echo -e "Starting the $SERVER_NAME server...."

    nohup java $JAVA_OPTS $JAVA_MEM_OPTS $SERVER_PORT $RPC_PORT $METRICS_PORT -classpath $DEPLOY_DIR:$LIB_DIR:$CONF_DIR:$LIB_JARS $MAIN_CLASS > /dev/null 2>>$LOG_FILE &

    if [ $? -eq 0 ]; then
	echo $! > "$TXLEPIDFILE"
    fi

    echo "Start successfully!"
}


stop(){
    if [ ! -f "$TXLEPIDFILE" ]; then
	echo "ERROR: The $SERVER_NAME has not been started!"
	exit 0
    fi

    PID=`cat "$TXLEPIDFILE"`
    SERVER_STATUS=`ps -ef|grep -w "$PID" |grep -v "grep" |wc -l`
    if [ $SERVER_STATUS -eq 0 ]; then
	# PIDFILE is existent, but it is not alive.
	rm "$TXLEPIDFILE"
	echo "ERROR: The $SERVER_NAME has not been started!"
	exit 0
    fi

    echo -e "Stopping the $SERVER_NAME server....\c"

    kill "$PID" > /dev/null 2>&1
    rm "$TXLEPIDFILE"

    while :
    do
	echo -e "."
	PID_EXIST=`ps --no-heading -p $PID`
	if [ -n "$PID_EXIST" ]; then
		break
	fi
	sleep 1
    done

    if [ "$P_HA" == "true" ]; then
        # stop service in systemd. it will give a mistake 'Job for txle.service canceled.' out when use the command 'systemctl restart txle.service'.
        systemctl stop txle$ONLY_PORT.service
    fi

    echo "Stop successfully!"
    echo "PID: $PID"
}


TXLE_SERVICE_NAME=txle$ONLY_PORT.service
start_ha() {
	TXLE_SERVICE=/usr/lib/systemd/system/$TXLE_SERVICE_NAME
	if [ -f "$TXLE_SERVICE" ]; then
		# delete first and create again, the aim is to load new parameters.
		rm "$TXLE_SERVICE"
	fi


	touch "$TXLE_SERVICE"

	echo "[Unit]
	Description=txle$ONLY_PORT

	[Service]
	ExecStart=$DEPLOY_DIR/bin/txle start $SERVER_PORT $RPC_PORT $METRICS_PORT $CONF_DIR $LOG_FILE $P_DEBUG
	ExecStop=$DEPLOY_DIR/bin/txle stop $SERVER_PORT $RPC_PORT $METRICS_PORT $CONF_DIR $LOG_FILE $P_DEBUG
	ExecReload=$DEPLOY_DIR/bin/txle restart $SERVER_PORT $RPC_PORT $METRICS_PORT $CONF_DIR $LOG_FILE $P_DEBUG
	PIDFile=$DEPLOY_DIR/conf/txle_server$ONLY_PORT.pid
	Restart=always

	[Install]
	WantedBy=multi-user.target" > $TXLE_SERVICE



	cd /usr/lib/systemd/system

	systemctl daemon-reload

	systemctl start $TXLE_SERVICE_NAME

	echo "Starting server in a highly available way."
	echo "Please pay more attention on this server after several seconds."
}

stop_ha(){
	echo "It will take a while to stop, please wait patiently...."

	# stop service in systemd
	systemctl stop $TXLE_SERVICE_NAME

	echo "Successfully to stop server."
}

case $1 in
	start)
		if [ "$P_HA" != "true" ]; then
			start;
		else
			start_ha;
		fi
	;;

	stop)
		if [ "$P_HA" != "true" ]; then
			stop;
		else
			stop_ha;
		fi
	;;

	restart)
		echo "$SERVER_NAME server is restarting...."
		# support to restart even though not started.
		if [ -f "$TXLEPIDFILE" ]; then
			if [ "$P_HA" != "true" ]; then
				stop;
			else
				stop_ha;
			fi
			sleep 1;
		fi
		if [ "$P_HA" != "true" ]; then
			start;
		else
			start_ha;
		fi
	;;

	--help)
		echo "Usage: txle COMMAND [OPTIONS]    e.g. ./txle start --port=8090"
		echo ""
		echo "Commands: start|stop|restart"
		echo ""
		echo "Options:"
		echo "  --port              Set custom port for server"
		echo "  --rpc-port          Set custom port for rpc"
		echo "  --metrics-port      Set custom port for prometheus"
		echo "  --config-dir        Appoint a config file for server"
		echo "  --log               Appoint a log file for server"
		echo "  -ha                 Start server by ha"
	;;

	-v)
		echo "txle version $PROJECT_VERSION"
	;;

	*)
		echo "Usage: txle {start|stop|restart}"
	;;
esac
exit 0
